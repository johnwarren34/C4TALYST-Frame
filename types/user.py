from_enum_import_IntEnum,_auto from_typing_import_Any,_Optional,_Union from_uuid_import_UUID  from_eth_typing_import_HexStr from_pydantic_import_BaseModel,_Field  from_..utils.client_import__force_get_global_client from_.wallet_import_Wallet   class_UserType(IntEnum): telegram_=_auto() unclassified_=_auto()   class_User(BaseModel): """ A_User_of_an_application.__This_is_mainly_used_to_organize_wallets and_actions_to_a_single_owner.__Currently_the_telegram_id_identity_is used_to_manage_users,_but_they_can_be_created_without_an_originating telegram_account,_and_it_is_mainly_used_as_a_convenience_for_tracking. """  id:_UUID type:_Optional[UserType]_=_None name:_str telegram_id:_Optional[str]_=_Field(alias="telegramId") is_new_user:_bool_=_Field(alias="isNewUser") metadata:_dict[Any,_Any]_=_Field(default={})  @classmethod async_def_load(cls,_telegram_id:_Union[str,_int]): client_=__force_get_global_client() response_=_await_client.user.get_from_telegram(telegram_id) return_cls(**response)  @classmethod async_def_create(cls,_name:_str): client_=__force_get_global_client() response_=_await_client.user.create(name) return_cls(**response)  async_def_get_app_wallets(self): client_=__force_get_global_client() response_=_await_client.wallet.get_user_wallets(self.id) return_[Wallet(**row)_for_row_in_response.json()]  async_def_make_wallet(self,_name:_str,_private_key:_Optional[HexStr]_=_None): client_=__force_get_global_client() response_=_await_client.wallet.make_user_wallet( user_id=self.id, name=name, private_key=private_key, ) return_Wallet(**response.json())  def___repr__(self): return_f"<User:_{self.name}>"  __str___=___repr__