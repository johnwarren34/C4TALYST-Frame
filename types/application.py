from_functools_import_singledispatchmethod from_typing_import_Optional from_uuid_import_UUID  from_eth_typing_import_ChecksumAddress from_pydantic_import_BaseModel,_Field  from_..utils.client_import__force_get_global_client,__set_global_client from_.wallet_import_Wallet from_.user_import_User   class_Application(BaseModel): """ This_represents_an_Application,_which_allows_a_builder_to_use_the_SDK. """  id:_UUID_=_Field() name:_str type:_str tier:_str api_key:_str_=_Field(alias="apiKey") swap_fee:_int_=_Field(alias="swapFee") fee_collection_amount:_int_=_Field(alias="feeCollectionAmount") request_count:_int_=_Field(alias="requestCount")   owner:_Optional[User]_=_Field() app_wallet:_Optional[Wallet]_=_Field(alias="appWallet")  @classmethod async_def_load(self,_api_key:_Optional[str]_=_None): """ Loads_an_instance_of_the_current_empyrealSDK_user's_application. If_an_`api_key`_is_provided,_this_will_create_a_new_global_client. Otherwise,_the_currently_set_application_from_the_global_context is_loaded.  Token_:class:`empyrealSDK.types.Token` """ from_empyrealSDK_import_EmpyrealSDK  if_api_key: new_client_=_EmpyrealSDK(api_key) _set_global_client(new_client) return_new_client  client:_EmpyrealSDK_=__force_get_global_client() return_await_client.app.info()  async_def_update_swap_fee(self,_swap_fee:_float): """ Update_your_applications_swap_fee. Swap_Fee_must_be_set_less_than_2%. """  client_=__force_get_global_client() if_swap_fee_>_0.02: raise_ValueError("Swap_Fee_must_be_less_than_2%") response_=_await_client.app.update( swap_fee=int(swap_fee_*_1_000_000), ) obj_=_response.json() for_key_in_obj["updates"]: setattr(self,_key,_obj["updates"][key]) return_self  @singledispatchmethod async_def_update_app_wallet(self,_wallet:_Wallet): """ Update_your_applications_swap_fee. Swap_Fee_must_be_set_less_than_2%. """  client_=__force_get_global_client() return_await_client.app.update( app_wallet_id=wallet.id, )  @update_app_wallet.register(str) async_def__(self,_wallet_address:_ChecksumAddress): """ Update_your_fee_recipient_wallet. """  client_=__force_get_global_client() wallet_=_await_Wallet.load(wallet_address)  return_await_client.app.update( app_wallet_id=wallet.id, )  async_def_refresh_api_key(self): """ Update_your_applications_swap_fee. Swap_Fee_must_be_set_less_than_2%. """  client_=__force_get_global_client() new_api_key_=_await_client.app.update_api_key() self.api_key_=_new_api_key return_self