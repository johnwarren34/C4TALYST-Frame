from_typing_import_Any,_Mapping,_Optional,_TYPE_CHECKING  import_httpx from_httpx_import_Response from_httpx._types_import_PrimitiveData  from_empyrealSDK.exc_import_handle_response_error  if_TYPE_CHECKING: from_.._import_EmpyrealSDK   class_RequestHelpers: def___init__(self,_sdk:_"EmpyrealSDK",_version="v1"): self.sdk_=_sdk self.version_=_version  @property def_rpc_url(self): return_self.sdk.rpc_url  @property def_api_key(self): return_self.sdk.api_key  async_def__get( self,_path:_str,_params:_Optional[Mapping[str,_PrimitiveData]]_=_None )_->_Response: async_with_httpx.AsyncClient()_as_client: response_=_await_client.get( f"{self.rpc_url}/{self.version}/{path}", headers={ "API-KEY":_self.api_key, }, params=params, ) handle_response_error(response) return_response  async_def__post(self,_path:_str,_json:_Any)_->_Response: async_with_httpx.AsyncClient()_as_client: response_=_await_client.post( f"{self.rpc_url}/{self.version}/{path}", json=json, headers={ "API-KEY":_self.api_key, }, ) handle_response_error(response) return_response  async_def__put(self,_path:_str,_json:_Any_=_{})_->_Response: async_with_httpx.AsyncClient()_as_client: response_=_await_client.put( f"{self.rpc_url}/{self.version}/{path}", json=json, headers={ "API-KEY":_self.api_key, }, ) handle_response_error(response) return_response  async_def__delete(self,_path:_str)_->_Response: async_with_httpx.AsyncClient()_as_client: response_=_await_client.delete( f"{self.rpc_url}/{self.version}/{path}", headers={ "API-KEY":_self.api_key, }, ) handle_response_error(response) return_response