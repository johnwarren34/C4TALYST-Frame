from_typing_import_Optional from_uuid_import_UUID  from_eth_typing_import_ChecksumAddress,_HexStr from_httpx_import_Response  from_empyrealSDK.utils_import_RequestHelpers   class_WalletResource(RequestHelpers): async_def_info( self, wallet_id:_UUID, with_private_key:_bool_=_False, ): response_=_await_self._get( "wallets/", params={ "walletId":_str(wallet_id), "withPrivateKey":_with_private_key, }, ) return_response.json()  async_def_load(self,_address:_ChecksumAddress): response_=_await_self._post( "wallets/noncustodial", json={ "address":_address, }, ) return_response.json()  async_def_get_app_wallets(self)_->_Response: response_=_await_self._get("wallets/app") return_response.json()  async_def_get_user_wallets(self,_user_id:_UUID)_->_Response: response_=_await_self._get("wallets/user",_params={"userId":_str(user_id)}) return_response.json()  async_def_archive(self,_wallet_id:_UUID): response_=_await_self._put( "wallets/archive", json={ "walletId":_wallet_id, }, ) return_response  async_def_make_app_wallet( self, name, private_key:_Optional[HexStr]_=_None, ): """ Make_an_app_wallet """ return_await_self._make_pk_wallet(name,_private_key)  async_def_make_user_wallet( self, user_id:_UUID, name:_str, private_key:_Optional[HexStr]_=_None, ): """ Make_a_wallet_for_a_user. """ if_private_key: return_await_self._make_pk_wallet(name,_private_key,_user_id=user_id) return_await_self._make_mnemonic_wallet(user_id,_name)  async_def_update_wallet_data( self, wallet_id:_UUID, archive:_bool_=_False, notes:_dict[str,_str]_=_{}, ): return_await_self._put( "wallets/data", json={ "walletId":_str(wallet_id), "archived":_archive, "notes":_notes, }, )  async_def_get_wallet_data( self, wallet_id:_UUID, ): return_await_self._get( f"wallets/data/{wallet_id}", )  async_def__make_mnemonic_wallet(self,_user_id:_UUID,_name:_str)_->_Response: response_=_await_self._post( "wallets/mnemonic", json={ "userId":_str(user_id), "name":_name, }, ) return_response  async_def__make_pk_wallet( self, name:_str, private_key:_Optional[HexStr]_=_None, user_id:_Optional[UUID]_=_None, )_->_Response: response_=_await_self._post( "wallets/pk", json={ "name":_name, "privateKey":_private_key, "userId":_user_id, }, ) return_response