from_typing_import_Literal,_Optional,_Union from_uuid_import_UUID  from_eth_typing_import_ChecksumAddress,_HexAddress,_HexStr from_httpx_import_Response  from_empyrealSDK.utils_import_RequestHelpers from_empyrealSDK.exc_import_handle_response_error   class_TokenResource(RequestHelpers): async_def_lookup(self,_token_address:_HexAddress,_chain_id:_int_=_1)_->_Response: """Looks_up_a_token's_info_in_the_SDK_given_it's_address_and_chain_id. This_is_useful_for_finding_a_token's_id_in_the_application. Using_an_ID_instead_of_address_and_chain_id_for_the_SDK_simplifies the_vault_logic.  Args: token_address:_HexAddress_a_string_in_Hex_String_format chain_id:_an_int_for_the_Chain_ID  Returns: Token """ response_=_await_self._get( "token/lookup", params={ "address":_token_address, "chainId":_chain_id, }, ) handle_response_error(response) return_response  async_def_transfer( self, token_id:_UUID, from_wallet_id:_UUID, recipient_address:_HexAddress, amount:_int, gas_price:_Optional[int]_=_None, )_->_HexStr: response_=_await_self._get( "token/transfer", params={ "walletId":_str(from_wallet_id), "tokenId":_str(token_id), "recipientAddress":_recipient_address, "amount":_amount, "gasPrice":_gas_price, }, ) return_response.json()  async_def_security( self, token_id:_UUID, chain_id:_int, ): response_=_await_self._get( "security/", params={ "tokenId":_str(token_id), "chainId":_chain_id, }, ) handle_response_error(response) return_response.json()["report"]  async_def_balance_of( self, token_address:_HexAddress, wallet_address:_HexAddress, chain_id:_int_=_1, block_num:_Union[int,_Literal["latest"]]_=_"latest", )_->_int: response_=_await_self._put( "token/balance", json={ "tokenAddress":_token_address, "ownerAddress":_wallet_address, "chainId":_chain_id, "block":_block_num, }, ) handle_response_error(response) return_response.json()["balance"]  async_def_allowance( self, token_address:_ChecksumAddress, owner_address:_ChecksumAddress, spender_address:_ChecksumAddress, chain_id:_int_=_1, block_num:_Optional[Union[int,_Literal["latest"]]]_=_"latest", )_->_int: response_=_await_self._get( "token/allowance", params={ "tokenAddress":_token_address, "owner":_owner_address, "spender":_spender_address, "chainId":_chain_id, "block":_block_num, }, ) handle_response_error(response) return_response.json()["allowance"]  async_def_approve( self, token_id:_UUID, wallet_id:_UUID, spender_address:_ChecksumAddress, chain_id:_int_=_1, amount:_int_=_int(2**256_-_1), priority_fee:_int_=_0, ): response_=_await_self._post( "token/approve", json={ "tokenId":_token_id, "walletId":_wallet_id, "spender":_spender_address, "chainId":_chain_id, "amount":_amount, "priorityFee":_priority_fee, }, ) handle_response_error(response) return_response.json()["txHash"]