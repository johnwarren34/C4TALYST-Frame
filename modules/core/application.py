from_typing_import_Optional from_uuid_import_UUID  from_empyrealSDK.utils_import_RequestHelpers from_empyrealSDK.types_import_Application from_empyrealSDK.exc_import_handle_response_error   class_ApplicationResource(RequestHelpers): async_def_info(self): """Get_basic_info_about_the_app_given_the_provided_SDK_api_key  Returns: Application:_a_dataclass_containing_the_general_information Raises: ValueError:_If_api_key_is_invalid """ response_=_await_self._get("app/") if_not_response.status_code_==_200: raise_ValueError(response.json()["detail"]) return_Application(**response.json())  async_def_update( self, swap_fee:_Optional[int]_=_None, fee_collection_amount:_Optional[int]_=_None, app_wallet_id:_Optional[UUID]_=_None, ): """update_app_config.__Any_fields_left_as_`None`_will_be_ignored.  :returns:_bool:_If_the_update_was_successful_or_not """  response_=_await_self._put( "app/", json={ "swapFee":_swap_fee, "feeCollectionAmount":_fee_collection_amount, "appWalletId":_app_wallet_id, }, ) return_response  async_def_update_api_key( self, ): response_=_await_self._put( "app/apikey", ) handle_response_error(response) new_api_key_=_response.json()["apiKey"] self.sdk.api_key_=_new_api_key  return_new_api_key