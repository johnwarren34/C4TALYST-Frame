from_typing_import_Literal  from_.modules_import_core,_dex from_.utils.client_import__set_global_client  ENVIRONMENTS_=_{ "local":_"http://localhost:8080", "prod":_"https://api.empyrealsdk.com", }   class_EmpyrealSDK: """ The_EmpyrealSDK_instance.__This_is_currently_a_global,_singleton_instance. So_when_a_user_initializes_the_empyrealSDK_instance,_this_will_be_used_automatically in_all_Empyreal_types.  Examples -------- Initially_in_any_codebase_using_the_SDK,_be_sure_to_declare  >>>_from_empyrealSDK_import_* >>>_api_key_=_"<api_key>" >>>_EmpyrealSDK(api_key) >>>_app_=_Application.load()  This_will_declare_your_SDK_instance_and_inject_it_in_all_method_invocations. Then_when_you_call_5_:meth:`empyrealSDK.types.Application.load`,_you_are_able_to_get_the_instance_attached to_your_``API_KEY``. """  rpc_url:_str api_key:_str  def___init__(self,_api_key:_str,_env:_Literal["local",_"prod"]_=_"prod"): if_env_not_in_ENVIRONMENTS: raise_ValueError( "Invalid_Environment.__Must_provide_one_of_['local',_'prod']" ) self.rpc_url_=_ENVIRONMENTS[env] self.api_key_=_api_key  self.app_=_core.ApplicationResource(self) self.infra_=_core.PingResource(self) self.token_=_core.TokenResource(self) self.user_=_core.UserResource(self) self.vault_=_core.VaultResource(self) self.wallet_=_core.WalletResource(self) self.prices_=_dex.price.PriceResource(self) self.swap_=_dex.swap.SwapResource(self) _set_global_client(self)